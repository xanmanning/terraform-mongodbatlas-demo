---

name: CI
'on':
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 1 * *"

defaults:
  run:
    working-directory: "terraform-mongodbatlas-demo"

jobs:
  checks:
    name: Code checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2
        with:
          path: "terraform-mongodbatlas-demo"

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install OS test dependencies
        run: sudo apt-get install -y shellcheck

      - name: Check ./go runs
        run: |
          ./go
        env:
          PY_COLORS: '1'

      - name: Install project dependencies
        run: |
          ./go build controller
        env:
          PY_COLORS: '1'

      - name: Run environment checks against the controller
        run: |
          ./go test controller
        env:
          PY_COLORS: '1'

      - name: Run checks against bash scripts
        run: |
          ./go test go
        env:
          PY_COLORS: '1'

      - name: Run checks against JSON config files
        run: |
          ./go test config
        env:
          PY_COLORS: '1'

      - name: Run validity checks against Terraform
        run: |
          ./go test terraform_validity
        env:
          PY_COLORS: '1'

      - name: Run style checks against Terraform
        run: |
          ./go test terraform_style
        env:
          PY_COLORS: '1'

  execution:
    name: Terraform execution checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2
        with:
          path: "terraform-mongodbatlas-demo"

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install project dependencies
        run: |
          ./go build controller
        env:
          PY_COLORS: '1'

      - name: Run check to ensure we can connect to MongoDB Atlas
        run: |
          ./go test atlas_login
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}
          MONGODB_ATLAS_PROJECT_ID: ${{ secrets.MONGODB_ATLAS_PROJECT_ID }}

      - name: Run end-to-end test with idempotence check
        run: |
          ./go test idempotence
        env:
          PY_COLORS: '1'
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY }}
          MONGODB_ATLAS_PROJECT_ID: ${{ secrets.MONGODB_ATLAS_PROJECT_ID }}
